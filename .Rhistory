View(exp_coef)
reg <- glm(win ~ birds,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
summary(reg)
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds + tucked,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
summary(reg)
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds + tucked + bonus,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
reg <- glm(win ~ birds + tucked + goals,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
summary(reg)
exp_coef <- reg$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds + tucked + eggs,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
exp_coef <- reg$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds + eggs,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
summary(reg)
exp_coef <- reg$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds + eggs + goals,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
exp_coef <- reg$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds + eggs + tucked,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
exp_coef <- reg$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds + eggs + tucked + player,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
summary(reg)
exp_coef <- reg$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds_pct + eggs + tucked,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
summary(reg)
exp_coef <- reg$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds + eggs + tucked,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
summary(reg)
exp_coef <- reg$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
View(exp_coef)
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds + eggs + tucked + bonus,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
exp_coef <- reg$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
View(exp_coef)
reg <- glm(win ~ birds + eggs + tucked + bonus_dummy,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total,
bonus_dummy = ifelse(bonus != 0, "Bonus", "No Bonus")))
summary(reg)
exp_coef <- reg$coefficients %>%
as.data.frame() %>%
rename(coefficient = ".") %>%
mutate(exponentiated = exp(coefficient))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
reg <- glm(win ~ birds + eggs + tucked + food,
family="binomial" (link="logit"),
data = dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(birds_pct = birds / total,
eggs_pct = eggs/total,
tucked_pct = tucked/total,
food_pct = food/total,
bonus_dummy = ifelse(bonus != 0, "Bonus", "No Bonus")))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
ggplot()+
geom_density(aes(estimate))+
facet_wrap(~as.factor(win), nrow = 2)+
theme_bw()
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
caret::confusionMatrix(.$prediction, .$win,
positive = "1")
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
select(prediction, win) %>%
caret::confusionMatrix(.$prediction, .$win,
positive = "1")
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
select(prediction, win)
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
select(prediction, win) %>%
caret::confusionMatrix(.$prediction, .$win, positive = "1")
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = ifelse(estimate >= 0.5, 1, 0)) %>%
select(prediction, win) %>%
caret::confusionMatrix(.$prediction, .$win)
dat %>%
mutate(win = as.factor(ifelse(outcome == "W", 1, 0))) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
caret::confusionMatrix(.$prediction, .$win, positive = "1")
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
caret::confusionMatrix(.$prediction, .$win, positive = "1")
dat %>%
mutate(win = ifelse(outcome == "W", "1", "0")) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
caret::confusionMatrix(.$prediction, .$win, positive = "1")
dat %>%
mutate(win = ifelse(outcome == "W", "1", "0")) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win)
dat %>%
mutate(win = as.factor(ifelse(outcome == "W", "1", "0"))) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
caret::confusionMatrix(.$prediction, .$win, positive = "1")
dat %>%
mutate(win = as.factor(ifelse(outcome == "W", 1, 0))) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
caret::confusionMatrix(.$prediction, .$win, positive = "1")
mutate(win = as.factor(ifelse(outcome == "W", 1, 0)) %>%
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win)
)
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win)
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
mutate(win = as.factor(win)) %>%
caret::confusionMatrix(.$prediction, .$win, positive = "1")
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>% group_by(win, prediction) %>% tally()
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
mutate(win = as.factor(as.character(win))) %>%
caret::confusionMatrix(.$prediction, .$win, positive = "1")
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
mutate(win = as.factor(as.character(win)))
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
mutate(win = as.factor(as.character(win))) %>%
caret::confusionMatrix(.$prediction, .$win, positive = "1")
dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
mutate(win = as.factor(as.character(win))) %>%
as.data.frame() %>%
caret::confusionMatrix(.$prediction, .$win, positive = "1")
caret::confusionMatrix(matrix_data$prediction, matrix_data$win, positive = "1")
matrix_data <- dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.5, 1, 0))) %>%
select(prediction, win) %>%
mutate(win = as.factor(as.character(win)))
caret::confusionMatrix(matrix_data$prediction, matrix_data$win, positive = "1")
matrix_data <- dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.3, 1, 0))) %>%
select(prediction, win) %>%
mutate(win = as.factor(as.character(win)))
caret::confusionMatrix(matrix_data$prediction, matrix_data$win, positive = "1")
matrix_data <- dat %>%
mutate(win = ifelse(outcome == "W", 1, 0)) %>%
filter(is.na(bonus) == FALSE &
is.na(goals) == FALSE) %>%
mutate(estimate = predict(reg, type="response"),
prediction = as.factor(ifelse(estimate >= 0.4, 1, 0))) %>%
select(prediction, win) %>%
mutate(win = as.factor(as.character(win)))
caret::confusionMatrix(matrix_data$prediction, matrix_data$win, positive = "1")
